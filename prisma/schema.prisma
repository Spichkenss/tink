generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  middleName      String?
  phone           String            @unique
  passwordHash    String?
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role            Role              @default(USER)
  balance         Float             @default(0.0)
  accounts        Account[]
  sessions        Session[]
  requests        Request[]
  withdrawRequest WithdrawRequest[]
}

model Request {
  id                      String   @id @default(cuid())
  userId                  String
  cardHolderName          String?
  user                    User     @relation(fields: [userId], references: [id])
  cardNumber              String?
  amount                  Float
  comment                 String?
  bank                    Bank
  billUrl                 String?
  isAnswered              Boolean  @default(false)
  isPaymentConfirmPressed Boolean  @default(false)
  isProcessed             Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model TradingTerminal {
  id               String            @id @default(cuid())
  name             String
  withdrawRequests WithdrawRequest[]
}

model WithdrawRequest {
  id                String          @id @default(cuid())
  userId            String
  tradingTerminalId String
  user              User            @relation(fields: [userId], references: [id])
  tradingTerminal   TradingTerminal @relation(fields: [tradingTerminalId], references: [id])
  amount            Float
  contact           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Contacts {
  id    String @id @default(cuid())
  name  Socials
  link  String
}

enum Socials {
  WHATSUP
}

enum Role {
  USER
  ADMIN
}

enum Bank {
  TINKOFF
  SBER
  ALPHA
  VTB
}
